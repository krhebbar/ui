/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { ArtifactSummary } from "./ArtifactSummary";
import { MeetingChannel } from "./MeetingChannel";
import { UserSummary } from "./UserSummary";
import { AtomSummary } from "./AtomSummary";
import { MeetingState } from "./MeetingState";
import { TagWithValue } from "./TagWithValue";
import { AtomBase } from "./AtomBase";

export const Meeting: core.serialization.ObjectSchema<serializers.Meeting.Raw, DevRev.Meeting> = core.serialization
    .object({
        artifacts: core.serialization.list(ArtifactSummary).optional(),
        channel: MeetingChannel.optional(),
        customFields: core.serialization.property(
            "custom_fields",
            core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
        ),
        customSchemaFragments: core.serialization.property(
            "custom_schema_fragments",
            core.serialization.list(core.serialization.string()).optional()
        ),
        description: core.serialization.string().optional(),
        endedDate: core.serialization.property("ended_date", core.serialization.date().optional()),
        externalRef: core.serialization.property("external_ref", core.serialization.string().optional()),
        externalUrl: core.serialization.property("external_url", core.serialization.string().optional()),
        members: core.serialization.list(UserSummary),
        organizer: UserSummary.optional(),
        parent: AtomSummary.optional(),
        recordingUrl: core.serialization.property("recording_url", core.serialization.string().optional()),
        scheduledDate: core.serialization.property("scheduled_date", core.serialization.date().optional()),
        state: MeetingState.optional(),
        stockSchemaFragment: core.serialization.property(
            "stock_schema_fragment",
            core.serialization.string().optional()
        ),
        subtype: core.serialization.string().optional(),
        tags: core.serialization.list(TagWithValue).optional(),
        title: core.serialization.string().optional(),
    })
    .extend(AtomBase);

export declare namespace Meeting {
    interface Raw extends AtomBase.Raw {
        artifacts?: ArtifactSummary.Raw[] | null;
        channel?: MeetingChannel.Raw | null;
        custom_fields?: Record<string, unknown> | null;
        custom_schema_fragments?: string[] | null;
        description?: string | null;
        ended_date?: string | null;
        external_ref?: string | null;
        external_url?: string | null;
        members: UserSummary.Raw[];
        organizer?: UserSummary.Raw | null;
        parent?: AtomSummary.Raw | null;
        recording_url?: string | null;
        scheduled_date?: string | null;
        state?: MeetingState.Raw | null;
        stock_schema_fragment?: string | null;
        subtype?: string | null;
        tags?: TagWithValue.Raw[] | null;
        title?: string | null;
    }
}
