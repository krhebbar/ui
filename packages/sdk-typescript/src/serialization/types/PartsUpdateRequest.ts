/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { PartsUpdateRequestArtifacts } from "./PartsUpdateRequestArtifacts";
import { CustomSchemaSpec } from "./CustomSchemaSpec";
import { PartsUpdateRequestOwnedBy } from "./PartsUpdateRequestOwnedBy";
import * as core from "../../core";
import * as serializers from "../index";
import * as DevRev from "../../api/index";
import { PartsUpdateRequestCapability } from "./PartsUpdateRequestCapability";
import { PartsUpdateRequestEnhancement } from "./PartsUpdateRequestEnhancement";
import { PartsUpdateRequestFeature } from "./PartsUpdateRequestFeature";
import { Empty } from "./Empty";
import { PartsUpdateRequestProduct } from "./PartsUpdateRequestProduct";

const _Base = core.serialization.object({
    artifacts: PartsUpdateRequestArtifacts.optional(),
    customFields: core.serialization.property(
        "custom_fields",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    customSchemaFragments: core.serialization.property(
        "custom_schema_fragments",
        core.serialization.list(core.serialization.string()).optional()
    ),
    customSchemaSpec: core.serialization.property("custom_schema_spec", CustomSchemaSpec.optional()),
    description: core.serialization.string().optional(),
    id: core.serialization.string(),
    name: core.serialization.string().optional(),
    ownedBy: core.serialization.property("owned_by", PartsUpdateRequestOwnedBy.optional()),
});
export const PartsUpdateRequest: core.serialization.Schema<
    serializers.PartsUpdateRequest.Raw,
    DevRev.PartsUpdateRequest
> = core.serialization
    .union("type", {
        capability: core.serialization
            .object({
                value: PartsUpdateRequestCapability,
            })
            .extend(_Base),
        enhancement: PartsUpdateRequestEnhancement.extend(_Base),
        feature: core.serialization
            .object({
                value: PartsUpdateRequestFeature,
            })
            .extend(_Base),
        none: core.serialization
            .object({
                value: Empty,
            })
            .extend(_Base),
        product: core.serialization
            .object({
                value: PartsUpdateRequestProduct,
            })
            .extend(_Base),
    })
    .transform<DevRev.PartsUpdateRequest>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace PartsUpdateRequest {
    type Raw =
        | PartsUpdateRequest.Capability
        | PartsUpdateRequest.Enhancement
        | PartsUpdateRequest.Feature
        | PartsUpdateRequest.None
        | PartsUpdateRequest.Product;

    interface Capability extends _Base {
        type: "capability";
        value: PartsUpdateRequestCapability.Raw;
    }

    interface Enhancement extends _Base, PartsUpdateRequestEnhancement.Raw {
        type: "enhancement";
    }

    interface Feature extends _Base {
        type: "feature";
        value: PartsUpdateRequestFeature.Raw;
    }

    interface None extends _Base {
        type: "none";
        value: Empty.Raw;
    }

    interface Product extends _Base {
        type: "product";
        value: PartsUpdateRequestProduct.Raw;
    }

    interface _Base {
        artifacts?: PartsUpdateRequestArtifacts.Raw | null;
        custom_fields?: Record<string, unknown> | null;
        custom_schema_fragments?: string[] | null;
        custom_schema_spec?: CustomSchemaSpec.Raw | null;
        description?: string | null;
        id: string;
        name?: string | null;
        owned_by?: PartsUpdateRequestOwnedBy.Raw | null;
    }
}
