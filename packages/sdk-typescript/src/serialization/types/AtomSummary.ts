/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { OrgBaseSummary } from "./OrgBaseSummary";
import { AtomBaseSummary } from "./AtomBaseSummary";
import { PartBaseSummary } from "./PartBaseSummary";
import { ConversationSummary } from "./ConversationSummary";
import { UserBaseSummary } from "./UserBaseSummary";
import { IncidentSummary } from "./IncidentSummary";
import { IssueSummary } from "./IssueSummary";
import { OpportunitySummary } from "./OpportunitySummary";
import { RevUserSummary } from "./RevUserSummary";
import { TagSummary } from "./TagSummary";
import { WorkBaseSummary } from "./WorkBaseSummary";
import { TicketSummary } from "./TicketSummary";

export const AtomSummary: core.serialization.Schema<serializers.AtomSummary.Raw, DevRev.AtomSummary> =
    core.serialization
        .union("type", {
            account: OrgBaseSummary,
            app_fragment: AtomBaseSummary,
            capability: PartBaseSummary,
            conversation: ConversationSummary,
            custom_type_fragment: AtomBaseSummary,
            dev_user: UserBaseSummary,
            engagement: AtomBaseSummary,
            enhancement: PartBaseSummary,
            feature: PartBaseSummary,
            incident: IncidentSummary,
            issue: IssueSummary,
            meeting: AtomBaseSummary,
            opportunity: OpportunitySummary,
            product: PartBaseSummary,
            rev_org: OrgBaseSummary,
            rev_user: RevUserSummary,
            service_account: UserBaseSummary,
            sys_user: UserBaseSummary,
            tag: TagSummary,
            task: WorkBaseSummary,
            tenant_fragment: AtomBaseSummary,
            ticket: TicketSummary,
            timeline_change_event: AtomBaseSummary,
            timeline_comment: AtomBaseSummary,
            user_preferences: AtomBaseSummary,
            webhook: AtomBaseSummary,
        })
        .transform<DevRev.AtomSummary>({
            transform: (value) => value,
            untransform: (value) => value,
        });

export declare namespace AtomSummary {
    type Raw =
        | AtomSummary.Account
        | AtomSummary.AppFragment
        | AtomSummary.Capability
        | AtomSummary.Conversation
        | AtomSummary.CustomTypeFragment
        | AtomSummary.DevUser
        | AtomSummary.Engagement
        | AtomSummary.Enhancement
        | AtomSummary.Feature
        | AtomSummary.Incident
        | AtomSummary.Issue
        | AtomSummary.Meeting
        | AtomSummary.Opportunity
        | AtomSummary.Product
        | AtomSummary.RevOrg
        | AtomSummary.RevUser
        | AtomSummary.ServiceAccount
        | AtomSummary.SysUser
        | AtomSummary.Tag
        | AtomSummary.Task
        | AtomSummary.TenantFragment
        | AtomSummary.Ticket
        | AtomSummary.TimelineChangeEvent
        | AtomSummary.TimelineComment
        | AtomSummary.UserPreferences
        | AtomSummary.Webhook;

    interface Account extends OrgBaseSummary.Raw {
        type: "account";
    }

    interface AppFragment extends AtomBaseSummary.Raw {
        type: "app_fragment";
    }

    interface Capability extends PartBaseSummary.Raw {
        type: "capability";
    }

    interface Conversation extends ConversationSummary.Raw {
        type: "conversation";
    }

    interface CustomTypeFragment extends AtomBaseSummary.Raw {
        type: "custom_type_fragment";
    }

    interface DevUser extends UserBaseSummary.Raw {
        type: "dev_user";
    }

    interface Engagement extends AtomBaseSummary.Raw {
        type: "engagement";
    }

    interface Enhancement extends PartBaseSummary.Raw {
        type: "enhancement";
    }

    interface Feature extends PartBaseSummary.Raw {
        type: "feature";
    }

    interface Incident extends IncidentSummary.Raw {
        type: "incident";
    }

    interface Issue extends IssueSummary.Raw {
        type: "issue";
    }

    interface Meeting extends AtomBaseSummary.Raw {
        type: "meeting";
    }

    interface Opportunity extends OpportunitySummary.Raw {
        type: "opportunity";
    }

    interface Product extends PartBaseSummary.Raw {
        type: "product";
    }

    interface RevOrg extends OrgBaseSummary.Raw {
        type: "rev_org";
    }

    interface RevUser extends RevUserSummary.Raw {
        type: "rev_user";
    }

    interface ServiceAccount extends UserBaseSummary.Raw {
        type: "service_account";
    }

    interface SysUser extends UserBaseSummary.Raw {
        type: "sys_user";
    }

    interface Tag extends TagSummary.Raw {
        type: "tag";
    }

    interface Task extends WorkBaseSummary.Raw {
        type: "task";
    }

    interface TenantFragment extends AtomBaseSummary.Raw {
        type: "tenant_fragment";
    }

    interface Ticket extends TicketSummary.Raw {
        type: "ticket";
    }

    interface TimelineChangeEvent extends AtomBaseSummary.Raw {
        type: "timeline_change_event";
    }

    interface TimelineComment extends AtomBaseSummary.Raw {
        type: "timeline_comment";
    }

    interface UserPreferences extends AtomBaseSummary.Raw {
        type: "user_preferences";
    }

    interface Webhook extends AtomBaseSummary.Raw {
        type: "webhook";
    }
}
