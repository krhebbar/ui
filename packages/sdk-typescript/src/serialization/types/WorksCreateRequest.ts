/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { CustomSchemaSpec } from "./CustomSchemaSpec";
import { StageInit } from "./StageInit";
import { StageValidationOptionForCreate } from "./StageValidationOptionForCreate";
import { SetTagWithValue } from "./SetTagWithValue";
import * as core from "../../core";
import * as serializers from "../index";
import * as DevRev from "../../api/index";
import { WorksCreateRequestIssue } from "./WorksCreateRequestIssue";
import { WorksCreateRequestOpportunity } from "./WorksCreateRequestOpportunity";
import { WorksCreateRequestTask } from "./WorksCreateRequestTask";
import { WorksCreateRequestTicket } from "./WorksCreateRequestTicket";

const _Base = core.serialization.object({
    appliesToPart: core.serialization.property("applies_to_part", core.serialization.string()),
    artifacts: core.serialization.list(core.serialization.string()).optional(),
    body: core.serialization.string().optional(),
    customFields: core.serialization.property(
        "custom_fields",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    customSchemaFragments: core.serialization.property(
        "custom_schema_fragments",
        core.serialization.list(core.serialization.string()).optional()
    ),
    customSchemaSpec: core.serialization.property("custom_schema_spec", CustomSchemaSpec.optional()),
    ownedBy: core.serialization.property("owned_by", core.serialization.list(core.serialization.string())),
    reportedBy: core.serialization.property(
        "reported_by",
        core.serialization.list(core.serialization.string()).optional()
    ),
    stage: StageInit.optional(),
    stageValidationOptions: core.serialization.property(
        "stage_validation_options",
        core.serialization.list(StageValidationOptionForCreate).optional()
    ),
    tags: core.serialization.list(SetTagWithValue).optional(),
    targetCloseDate: core.serialization.property("target_close_date", core.serialization.date().optional()),
    title: core.serialization.string(),
});
export const WorksCreateRequest: core.serialization.Schema<
    serializers.WorksCreateRequest.Raw,
    DevRev.WorksCreateRequest
> = core.serialization
    .union("type", {
        issue: WorksCreateRequestIssue.extend(_Base),
        opportunity: WorksCreateRequestOpportunity.extend(_Base),
        task: WorksCreateRequestTask.extend(_Base),
        ticket: WorksCreateRequestTicket.extend(_Base),
    })
    .transform<DevRev.WorksCreateRequest>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace WorksCreateRequest {
    type Raw =
        | WorksCreateRequest.Issue
        | WorksCreateRequest.Opportunity
        | WorksCreateRequest.Task
        | WorksCreateRequest.Ticket;

    interface Issue extends _Base, WorksCreateRequestIssue.Raw {
        type: "issue";
    }

    interface Opportunity extends _Base, WorksCreateRequestOpportunity.Raw {
        type: "opportunity";
    }

    interface Task extends _Base, WorksCreateRequestTask.Raw {
        type: "task";
    }

    interface Ticket extends _Base, WorksCreateRequestTicket.Raw {
        type: "ticket";
    }

    interface _Base {
        applies_to_part: string;
        artifacts?: string[] | null;
        body?: string | null;
        custom_fields?: Record<string, unknown> | null;
        custom_schema_fragments?: string[] | null;
        custom_schema_spec?: CustomSchemaSpec.Raw | null;
        owned_by: string[];
        reported_by?: string[] | null;
        stage?: StageInit.Raw | null;
        stage_validation_options?: StageValidationOptionForCreate.Raw[] | null;
        tags?: SetTagWithValue.Raw[] | null;
        target_close_date?: string | null;
        title: string;
    }
}
