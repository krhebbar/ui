/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { TimelineEntryObjectType } from "./TimelineEntryObjectType";
import { TimelineEntryPanel } from "./TimelineEntryPanel";
import { TimelineReaction } from "./TimelineReaction";
import { TimelineThread } from "./TimelineThread";
import { TimelineEntryVisibility } from "./TimelineEntryVisibility";
import { AtomBase } from "./AtomBase";

export const TimelineEntryBase: core.serialization.ObjectSchema<
    serializers.TimelineEntryBase.Raw,
    DevRev.TimelineEntryBase
> = core.serialization
    .object({
        externalRef: core.serialization.property("external_ref", core.serialization.string().optional()),
        labels: core.serialization.list(core.serialization.string()).optional(),
        object: core.serialization.string(),
        objectDisplayId: core.serialization.property("object_display_id", core.serialization.string()),
        objectType: core.serialization.property("object_type", TimelineEntryObjectType.optional()),
        panels: core.serialization.list(TimelineEntryPanel).optional(),
        reactions: core.serialization.list(TimelineReaction).optional(),
        thread: TimelineThread.optional(),
        visibility: TimelineEntryVisibility.optional(),
    })
    .extend(AtomBase);

export declare namespace TimelineEntryBase {
    interface Raw extends AtomBase.Raw {
        external_ref?: string | null;
        labels?: string[] | null;
        object: string;
        object_display_id: string;
        object_type?: TimelineEntryObjectType.Raw | null;
        panels?: TimelineEntryPanel.Raw[] | null;
        reactions?: TimelineReaction.Raw[] | null;
        thread?: TimelineThread.Raw | null;
        visibility?: TimelineEntryVisibility.Raw | null;
    }
}
