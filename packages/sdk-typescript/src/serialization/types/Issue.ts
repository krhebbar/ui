/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { PartSummary } from "./PartSummary";
import { IssuePriority } from "./IssuePriority";
import { SlaTrackerSummary } from "./SlaTrackerSummary";
import { VistaGroupItemSummary } from "./VistaGroupItemSummary";
import { WorkBase } from "./WorkBase";

export const Issue: core.serialization.ObjectSchema<serializers.Issue.Raw, DevRev.Issue> = core.serialization
    .object({
        actualStartDate: core.serialization.property("actual_start_date", core.serialization.date().optional()),
        developedWith: core.serialization.property("developed_with", core.serialization.list(PartSummary).optional()),
        priority: IssuePriority.optional(),
        slaTracker: core.serialization.property("sla_tracker", SlaTrackerSummary.optional()),
        sprint: VistaGroupItemSummary.optional(),
        targetStartDate: core.serialization.property("target_start_date", core.serialization.date().optional()),
    })
    .extend(WorkBase);

export declare namespace Issue {
    interface Raw extends WorkBase.Raw {
        actual_start_date?: string | null;
        developed_with?: PartSummary.Raw[] | null;
        priority?: IssuePriority.Raw | null;
        sla_tracker?: SlaTrackerSummary.Raw | null;
        sprint?: VistaGroupItemSummary.Raw | null;
        target_start_date?: string | null;
    }
}
