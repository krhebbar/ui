/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { PartBase } from "./PartBase";

export const Part: core.serialization.Schema<serializers.Part.Raw, DevRev.Part> = core.serialization
    .union("type", {
        capability: PartBase,
        enhancement: PartBase,
        feature: PartBase,
        product: PartBase,
    })
    .transform<DevRev.Part>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace Part {
    type Raw = Part.Capability | Part.Enhancement | Part.Feature | Part.Product;

    interface Capability extends PartBase.Raw {
        type: "capability";
    }

    interface Enhancement extends PartBase.Raw {
        type: "enhancement";
    }

    interface Feature extends PartBase.Raw {
        type: "feature";
    }

    interface Product extends PartBase.Raw {
        type: "product";
    }
}
