/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { SchemaFieldDescriptorArrayType } from "./SchemaFieldDescriptorArrayType";
import { SchemaBoolFieldDescriptor } from "./SchemaBoolFieldDescriptor";
import { SchemaCompositeFieldDescriptor } from "./SchemaCompositeFieldDescriptor";
import { SchemaDateFieldDescriptor } from "./SchemaDateFieldDescriptor";
import { SchemaDoubleFieldDescriptor } from "./SchemaDoubleFieldDescriptor";
import { SchemaEnumFieldDescriptor } from "./SchemaEnumFieldDescriptor";
import { SchemaIdFieldDescriptor } from "./SchemaIdFieldDescriptor";
import { SchemaIntFieldDescriptor } from "./SchemaIntFieldDescriptor";
import { SchemaRichTextFieldDescriptor } from "./SchemaRichTextFieldDescriptor";
import { SchemaStructFieldDescriptor } from "./SchemaStructFieldDescriptor";
import { SchemaTextFieldDescriptor } from "./SchemaTextFieldDescriptor";
import { SchemaTimestampFieldDescriptor } from "./SchemaTimestampFieldDescriptor";
import { SchemaTokensFieldDescriptor } from "./SchemaTokensFieldDescriptor";
import { SchemaUenumFieldDescriptor } from "./SchemaUenumFieldDescriptor";
import { SchemaFieldDescriptorBase } from "./SchemaFieldDescriptorBase";

export const SchemaFieldDescriptor: core.serialization.Schema<
    serializers.SchemaFieldDescriptor.Raw,
    DevRev.SchemaFieldDescriptor
> = core.serialization
    .union(core.serialization.discriminant("fieldType", "field_type"), {
        array: core.serialization.object({
            value: SchemaFieldDescriptorArrayType,
        }),
        bool: SchemaBoolFieldDescriptor,
        composite: SchemaCompositeFieldDescriptor,
        date: SchemaDateFieldDescriptor,
        double: SchemaDoubleFieldDescriptor,
        enum: SchemaEnumFieldDescriptor,
        id: SchemaIdFieldDescriptor,
        int: SchemaIntFieldDescriptor,
        rich_text: SchemaRichTextFieldDescriptor,
        struct: SchemaStructFieldDescriptor,
        text: SchemaTextFieldDescriptor,
        timestamp: SchemaTimestampFieldDescriptor,
        tokens: SchemaTokensFieldDescriptor,
        uenum: SchemaUenumFieldDescriptor,
        unknown: SchemaFieldDescriptorBase,
    })
    .transform<DevRev.SchemaFieldDescriptor>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace SchemaFieldDescriptor {
    type Raw =
        | SchemaFieldDescriptor.Array
        | SchemaFieldDescriptor.Bool
        | SchemaFieldDescriptor.Composite
        | SchemaFieldDescriptor.Date
        | SchemaFieldDescriptor.Double
        | SchemaFieldDescriptor.Enum
        | SchemaFieldDescriptor.Id
        | SchemaFieldDescriptor.Int
        | SchemaFieldDescriptor.RichText
        | SchemaFieldDescriptor.Struct
        | SchemaFieldDescriptor.Text
        | SchemaFieldDescriptor.Timestamp
        | SchemaFieldDescriptor.Tokens
        | SchemaFieldDescriptor.Uenum
        | SchemaFieldDescriptor.Unknown;

    interface Array {
        field_type: "array";
        value: SchemaFieldDescriptorArrayType.Raw;
    }

    interface Bool extends SchemaBoolFieldDescriptor.Raw {
        field_type: "bool";
    }

    interface Composite extends SchemaCompositeFieldDescriptor.Raw {
        field_type: "composite";
    }

    interface Date extends SchemaDateFieldDescriptor.Raw {
        field_type: "date";
    }

    interface Double extends SchemaDoubleFieldDescriptor.Raw {
        field_type: "double";
    }

    interface Enum extends SchemaEnumFieldDescriptor.Raw {
        field_type: "enum";
    }

    interface Id extends SchemaIdFieldDescriptor.Raw {
        field_type: "id";
    }

    interface Int extends SchemaIntFieldDescriptor.Raw {
        field_type: "int";
    }

    interface RichText extends SchemaRichTextFieldDescriptor.Raw {
        field_type: "rich_text";
    }

    interface Struct extends SchemaStructFieldDescriptor.Raw {
        field_type: "struct";
    }

    interface Text extends SchemaTextFieldDescriptor.Raw {
        field_type: "text";
    }

    interface Timestamp extends SchemaTimestampFieldDescriptor.Raw {
        field_type: "timestamp";
    }

    interface Tokens extends SchemaTokensFieldDescriptor.Raw {
        field_type: "tokens";
    }

    interface Uenum extends SchemaUenumFieldDescriptor.Raw {
        field_type: "uenum";
    }

    interface Unknown extends SchemaFieldDescriptorBase.Raw {
        field_type: "unknown";
    }
}
