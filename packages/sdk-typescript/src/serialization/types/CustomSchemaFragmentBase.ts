/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { CustomSchemaFragmentCondition } from "./CustomSchemaFragmentCondition";
import { SchemaFieldDescriptor } from "./SchemaFieldDescriptor";
import { CustomSchemaFragmentFragmentType } from "./CustomSchemaFragmentFragmentType";
import { CustomSchemaFragmentSummary } from "./CustomSchemaFragmentSummary";
import { AtomBase } from "./AtomBase";

export const CustomSchemaFragmentBase: core.serialization.ObjectSchema<
    serializers.CustomSchemaFragmentBase.Raw,
    DevRev.CustomSchemaFragmentBase
> = core.serialization
    .object({
        conditions: core.serialization.list(CustomSchemaFragmentCondition).optional(),
        deprecated: core.serialization.boolean().optional(),
        description: core.serialization.string().optional(),
        fields: core.serialization.list(SchemaFieldDescriptor).optional(),
        fragmentType: core.serialization.property("fragment_type", CustomSchemaFragmentFragmentType.optional()),
        leafType: core.serialization.property("leaf_type", core.serialization.string().optional()),
        newFragmentRef: core.serialization.property("new_fragment_ref", CustomSchemaFragmentSummary.optional()),
        oldFragmentRef: core.serialization.property("old_fragment_ref", CustomSchemaFragmentSummary.optional()),
    })
    .extend(AtomBase);

export declare namespace CustomSchemaFragmentBase {
    interface Raw extends AtomBase.Raw {
        conditions?: CustomSchemaFragmentCondition.Raw[] | null;
        deprecated?: boolean | null;
        description?: string | null;
        fields?: SchemaFieldDescriptor.Raw[] | null;
        fragment_type?: CustomSchemaFragmentFragmentType.Raw | null;
        leaf_type?: string | null;
        new_fragment_ref?: CustomSchemaFragmentSummary.Raw | null;
        old_fragment_ref?: CustomSchemaFragmentSummary.Raw | null;
    }
}
