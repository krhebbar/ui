/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { SchemaFieldMfzMetadata } from "./SchemaFieldMfzMetadata";
import { SchemaFieldOasisMetadata } from "./SchemaFieldOasisMetadata";
import { SchemaFieldUiMetadata } from "./SchemaFieldUiMetadata";

export const SchemaFieldDescriptorBase: core.serialization.ObjectSchema<
    serializers.SchemaFieldDescriptorBase.Raw,
    DevRev.SchemaFieldDescriptorBase
> = core.serialization.object({
    description: core.serialization.string().optional(),
    isFilterable: core.serialization.property("is_filterable", core.serialization.boolean().optional()),
    isImmutable: core.serialization.property("is_immutable", core.serialization.boolean().optional()),
    isPii: core.serialization.property("is_pii", core.serialization.boolean().optional()),
    isRequired: core.serialization.property("is_required", core.serialization.boolean().optional()),
    mfz: SchemaFieldMfzMetadata.optional(),
    name: core.serialization.string(),
    oasis: SchemaFieldOasisMetadata.optional(),
    origin: core.serialization.string().optional(),
    ui: SchemaFieldUiMetadata.optional(),
});

export declare namespace SchemaFieldDescriptorBase {
    interface Raw {
        description?: string | null;
        is_filterable?: boolean | null;
        is_immutable?: boolean | null;
        is_pii?: boolean | null;
        is_required?: boolean | null;
        mfz?: SchemaFieldMfzMetadata.Raw | null;
        name: string;
        oasis?: SchemaFieldOasisMetadata.Raw | null;
        origin?: string | null;
        ui?: SchemaFieldUiMetadata.Raw | null;
    }
}
