/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { LinesOfCode } from "./LinesOfCode";
import { CodeChangeSource } from "./CodeChangeSource";
import { AtomBase } from "./AtomBase";

export const CodeChange: core.serialization.ObjectSchema<serializers.CodeChange.Raw, DevRev.CodeChange> =
    core.serialization
        .object({
            branch: core.serialization.string().optional(),
            closedDate: core.serialization.property("closed_date", core.serialization.date().optional()),
            commitId: core.serialization.property("commit_id", core.serialization.string().optional()),
            description: core.serialization.string().optional(),
            externalIdentifier: core.serialization.property(
                "external_identifier",
                core.serialization.string().optional()
            ),
            filteredLoc: core.serialization.property("filtered_loc", LinesOfCode.optional()),
            repoUrl: core.serialization.property("repo_url", core.serialization.string().optional()),
            source: CodeChangeSource.optional(),
            targetBranch: core.serialization.property("target_branch", core.serialization.string().optional()),
            title: core.serialization.string().optional(),
            totalLoc: core.serialization.property("total_loc", LinesOfCode.optional()),
        })
        .extend(AtomBase);

export declare namespace CodeChange {
    interface Raw extends AtomBase.Raw {
        branch?: string | null;
        closed_date?: string | null;
        commit_id?: string | null;
        description?: string | null;
        external_identifier?: string | null;
        filtered_loc?: LinesOfCode.Raw | null;
        repo_url?: string | null;
        source?: CodeChangeSource.Raw | null;
        target_branch?: string | null;
        title?: string | null;
        total_loc?: LinesOfCode.Raw | null;
    }
}
