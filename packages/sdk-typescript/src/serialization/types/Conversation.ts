/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { GroupSummary } from "./GroupSummary";
import { UserSummary } from "./UserSummary";
import { TimelineEntry } from "./TimelineEntry";
import { ConversationMetadata } from "./ConversationMetadata";
import { SlaTrackerSummary } from "./SlaTrackerSummary";
import { LegacyStage } from "./LegacyStage";
import { TagWithValue } from "./TagWithValue";
import { AtomBase } from "./AtomBase";

export const Conversation: core.serialization.ObjectSchema<serializers.Conversation.Raw, DevRev.Conversation> =
    core.serialization
        .object({
            description: core.serialization.string().optional(),
            group: GroupSummary.optional(),
            members: core.serialization.list(UserSummary),
            messages: core.serialization.list(TimelineEntry).optional(),
            metadata: ConversationMetadata.optional(),
            ownedBy: core.serialization.property("owned_by", core.serialization.list(UserSummary).optional()),
            slaTracker: core.serialization.property("sla_tracker", SlaTrackerSummary.optional()),
            stage: LegacyStage.optional(),
            tags: core.serialization.list(TagWithValue).optional(),
            title: core.serialization.string().optional(),
        })
        .extend(AtomBase);

export declare namespace Conversation {
    interface Raw extends AtomBase.Raw {
        description?: string | null;
        group?: GroupSummary.Raw | null;
        members: UserSummary.Raw[];
        messages?: TimelineEntry.Raw[] | null;
        metadata?: ConversationMetadata.Raw | null;
        owned_by?: UserSummary.Raw[] | null;
        sla_tracker?: SlaTrackerSummary.Raw | null;
        stage?: LegacyStage.Raw | null;
        tags?: TagWithValue.Raw[] | null;
        title?: string | null;
    }
}
