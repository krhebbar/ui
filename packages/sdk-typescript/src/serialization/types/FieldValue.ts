/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { FieldValueBool } from "./FieldValueBool";
import { FieldValueBoolList } from "./FieldValueBoolList";
import { FieldValueDateValue } from "./FieldValueDateValue";
import { FieldValueDateList } from "./FieldValueDateList";
import { FieldValueDateTimeValue } from "./FieldValueDateTimeValue";
import { FieldValueDateTimeList } from "./FieldValueDateTimeList";
import { FieldValueDouble } from "./FieldValueDouble";
import { FieldValueDoubleList } from "./FieldValueDoubleList";
import { FieldValueId } from "./FieldValueId";
import { FieldValueIdList } from "./FieldValueIdList";
import { FieldValueInt64 } from "./FieldValueInt64";
import { FieldValueInt64List } from "./FieldValueInt64List";
import { FieldValueStage } from "./FieldValueStage";
import { FieldValueString } from "./FieldValueString";
import { FieldValueStringList } from "./FieldValueStringList";
import { FieldValueTagSummary } from "./FieldValueTagSummary";
import { FieldValueTagSummaryList } from "./FieldValueTagSummaryList";

export const FieldValue: core.serialization.Schema<serializers.FieldValue.Raw, DevRev.FieldValue> = core.serialization
    .union("type", {
        bool: FieldValueBool,
        bool_list: FieldValueBoolList,
        composite: core.serialization.lazyObject(() => serializers.FieldValueComposite),
        composite_list: core.serialization.lazyObject(() => serializers.FieldValueCompositeList),
        date: FieldValueDateValue,
        date_list: FieldValueDateList,
        date_time: FieldValueDateTimeValue,
        date_time_list: FieldValueDateTimeList,
        double: FieldValueDouble,
        double_list: FieldValueDoubleList,
        id: FieldValueId,
        id_list: FieldValueIdList,
        int: FieldValueInt64,
        int_list: FieldValueInt64List,
        stage: FieldValueStage,
        string: FieldValueString,
        string_list: FieldValueStringList,
        tag_summary: FieldValueTagSummary,
        tag_summary_list: FieldValueTagSummaryList,
    })
    .transform<DevRev.FieldValue>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace FieldValue {
    type Raw =
        | FieldValue.Bool
        | FieldValue.BoolList
        | FieldValue.Composite
        | FieldValue.CompositeList
        | FieldValue.Date
        | FieldValue.DateList
        | FieldValue.DateTime
        | FieldValue.DateTimeList
        | FieldValue.Double
        | FieldValue.DoubleList
        | FieldValue.Id
        | FieldValue.IdList
        | FieldValue.Int
        | FieldValue.IntList
        | FieldValue.Stage
        | FieldValue.String
        | FieldValue.StringList
        | FieldValue.TagSummary
        | FieldValue.TagSummaryList;

    interface Bool extends FieldValueBool.Raw {
        type: "bool";
    }

    interface BoolList extends FieldValueBoolList.Raw {
        type: "bool_list";
    }

    interface Composite extends serializers.FieldValueComposite.Raw {
        type: "composite";
    }

    interface CompositeList extends serializers.FieldValueCompositeList.Raw {
        type: "composite_list";
    }

    interface Date extends FieldValueDateValue.Raw {
        type: "date";
    }

    interface DateList extends FieldValueDateList.Raw {
        type: "date_list";
    }

    interface DateTime extends FieldValueDateTimeValue.Raw {
        type: "date_time";
    }

    interface DateTimeList extends FieldValueDateTimeList.Raw {
        type: "date_time_list";
    }

    interface Double extends FieldValueDouble.Raw {
        type: "double";
    }

    interface DoubleList extends FieldValueDoubleList.Raw {
        type: "double_list";
    }

    interface Id extends FieldValueId.Raw {
        type: "id";
    }

    interface IdList extends FieldValueIdList.Raw {
        type: "id_list";
    }

    interface Int extends FieldValueInt64.Raw {
        type: "int";
    }

    interface IntList extends FieldValueInt64List.Raw {
        type: "int_list";
    }

    interface Stage extends FieldValueStage.Raw {
        type: "stage";
    }

    interface String extends FieldValueString.Raw {
        type: "string";
    }

    interface StringList extends FieldValueStringList.Raw {
        type: "string_list";
    }

    interface TagSummary extends FieldValueTagSummary.Raw {
        type: "tag_summary";
    }

    interface TagSummaryList extends FieldValueTagSummaryList.Raw {
        type: "tag_summary_list";
    }
}
