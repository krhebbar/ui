/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { WorksUpdateRequestArtifacts } from "./WorksUpdateRequestArtifacts";
import { CustomSchemaSpec } from "./CustomSchemaSpec";
import { WorksUpdateRequestOwnedBy } from "./WorksUpdateRequestOwnedBy";
import { WorksUpdateRequestReportedBy } from "./WorksUpdateRequestReportedBy";
import { StageUpdate } from "./StageUpdate";
import { StageValidationOptionForUpdate } from "./StageValidationOptionForUpdate";
import { WorksUpdateRequestStagedInfoUpdate } from "./WorksUpdateRequestStagedInfoUpdate";
import { WorksUpdateRequestTags } from "./WorksUpdateRequestTags";
import * as core from "../../core";
import * as serializers from "../index";
import * as DevRev from "../../api/index";
import { WorksUpdateRequestIssue } from "./WorksUpdateRequestIssue";
import { Empty } from "./Empty";
import { WorksUpdateRequestOpportunity } from "./WorksUpdateRequestOpportunity";
import { WorksUpdateRequestTask } from "./WorksUpdateRequestTask";
import { WorksUpdateRequestTicket } from "./WorksUpdateRequestTicket";

const _Base = core.serialization.object({
    appliesToPart: core.serialization.property("applies_to_part", core.serialization.string().optional()),
    artifacts: WorksUpdateRequestArtifacts.optional(),
    body: core.serialization.string().optional(),
    customFields: core.serialization.property(
        "custom_fields",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    customSchemaFragments: core.serialization.property(
        "custom_schema_fragments",
        core.serialization.list(core.serialization.string()).optional()
    ),
    customSchemaSpec: core.serialization.property("custom_schema_spec", CustomSchemaSpec.optional()),
    id: core.serialization.string(),
    ownedBy: core.serialization.property("owned_by", WorksUpdateRequestOwnedBy.optional()),
    reportedBy: core.serialization.property("reported_by", WorksUpdateRequestReportedBy.optional()),
    stage: StageUpdate.optional(),
    stageValidationOptions: core.serialization.property(
        "stage_validation_options",
        core.serialization.list(StageValidationOptionForUpdate).optional()
    ),
    stagedInfo: core.serialization.property("staged_info", WorksUpdateRequestStagedInfoUpdate.optional()),
    tags: WorksUpdateRequestTags.optional(),
    targetCloseDate: core.serialization.property("target_close_date", core.serialization.date().optional()),
    title: core.serialization.string().optional(),
});
export const WorksUpdateRequest: core.serialization.Schema<
    serializers.WorksUpdateRequest.Raw,
    DevRev.WorksUpdateRequest
> = core.serialization
    .union("type", {
        issue: WorksUpdateRequestIssue.extend(_Base),
        none: core.serialization
            .object({
                value: Empty,
            })
            .extend(_Base),
        opportunity: WorksUpdateRequestOpportunity.extend(_Base),
        task: WorksUpdateRequestTask.extend(_Base),
        ticket: WorksUpdateRequestTicket.extend(_Base),
    })
    .transform<DevRev.WorksUpdateRequest>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace WorksUpdateRequest {
    type Raw =
        | WorksUpdateRequest.Issue
        | WorksUpdateRequest.None
        | WorksUpdateRequest.Opportunity
        | WorksUpdateRequest.Task
        | WorksUpdateRequest.Ticket;

    interface Issue extends _Base, WorksUpdateRequestIssue.Raw {
        type: "issue";
    }

    interface None extends _Base {
        type: "none";
        value: Empty.Raw;
    }

    interface Opportunity extends _Base, WorksUpdateRequestOpportunity.Raw {
        type: "opportunity";
    }

    interface Task extends _Base, WorksUpdateRequestTask.Raw {
        type: "task";
    }

    interface Ticket extends _Base, WorksUpdateRequestTicket.Raw {
        type: "ticket";
    }

    interface _Base {
        applies_to_part?: string | null;
        artifacts?: WorksUpdateRequestArtifacts.Raw | null;
        body?: string | null;
        custom_fields?: Record<string, unknown> | null;
        custom_schema_fragments?: string[] | null;
        custom_schema_spec?: CustomSchemaSpec.Raw | null;
        id: string;
        owned_by?: WorksUpdateRequestOwnedBy.Raw | null;
        reported_by?: WorksUpdateRequestReportedBy.Raw | null;
        stage?: StageUpdate.Raw | null;
        stage_validation_options?: StageValidationOptionForUpdate.Raw[] | null;
        staged_info?: WorksUpdateRequestStagedInfoUpdate.Raw | null;
        tags?: WorksUpdateRequestTags.Raw | null;
        target_close_date?: string | null;
        title?: string | null;
    }
}
