/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { SchemaFieldDescriptor } from "./SchemaFieldDescriptor";
import { AtomSummary } from "./AtomSummary";
import { AtomBase } from "./AtomBase";

export const StockSchemaFragment: core.serialization.ObjectSchema<
    serializers.StockSchemaFragment.Raw,
    DevRev.StockSchemaFragment
> = core.serialization
    .object({
        description: core.serialization.string().optional(),
        fields: core.serialization.list(SchemaFieldDescriptor),
        leafType: core.serialization.property("leaf_type", core.serialization.string().optional()),
        newFragmentRef: core.serialization.property("new_fragment_ref", AtomSummary.optional()),
        oldFragmentRef: core.serialization.property("old_fragment_ref", AtomSummary.optional()),
        title: core.serialization.string().optional(),
    })
    .extend(AtomBase);

export declare namespace StockSchemaFragment {
    interface Raw extends AtomBase.Raw {
        description?: string | null;
        fields: SchemaFieldDescriptor.Raw[];
        leaf_type?: string | null;
        new_fragment_ref?: AtomSummary.Raw | null;
        old_fragment_ref?: AtomSummary.Raw | null;
        title?: string | null;
    }
}
