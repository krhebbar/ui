/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as core from "../../core";
import * as serializers from "../index";
import * as DevRev from "../../api/index";
import { SchemaBoolListFieldDescriptor } from "./SchemaBoolListFieldDescriptor";
import { SchemaCompositeListFieldDescriptor } from "./SchemaCompositeListFieldDescriptor";
import { SchemaDateListFieldDescriptor } from "./SchemaDateListFieldDescriptor";
import { SchemaDoubleListFieldDescriptor } from "./SchemaDoubleListFieldDescriptor";
import { SchemaEnumListFieldDescriptor } from "./SchemaEnumListFieldDescriptor";
import { SchemaIdListFieldDescriptor } from "./SchemaIdListFieldDescriptor";
import { SchemaIntListFieldDescriptor } from "./SchemaIntListFieldDescriptor";
import { SchemaRichTextListFieldDescriptor } from "./SchemaRichTextListFieldDescriptor";
import { SchemaStructListFieldDescriptor } from "./SchemaStructListFieldDescriptor";
import { SchemaTextListFieldDescriptor } from "./SchemaTextListFieldDescriptor";
import { SchemaTimestampListFieldDescriptor } from "./SchemaTimestampListFieldDescriptor";
import { SchemaTokensListFieldDescriptor } from "./SchemaTokensListFieldDescriptor";
import { SchemaUenumListFieldDescriptor } from "./SchemaUenumListFieldDescriptor";

const _Base = core.serialization.object({
    eqItems: core.serialization.property("eq_items", core.serialization.number().optional()),
    maxItems: core.serialization.property("max_items", core.serialization.number().optional()),
    minItems: core.serialization.property("min_items", core.serialization.number().optional()),
});
export const SchemaFieldDescriptorArrayType: core.serialization.Schema<
    serializers.SchemaFieldDescriptorArrayType.Raw,
    DevRev.SchemaFieldDescriptorArrayType
> = core.serialization
    .union(core.serialization.discriminant("baseType", "base_type"), {
        bool: SchemaBoolListFieldDescriptor.extend(_Base),
        composite: SchemaCompositeListFieldDescriptor.extend(_Base),
        date: SchemaDateListFieldDescriptor.extend(_Base),
        double: SchemaDoubleListFieldDescriptor.extend(_Base),
        enum: SchemaEnumListFieldDescriptor.extend(_Base),
        id: SchemaIdListFieldDescriptor.extend(_Base),
        int: SchemaIntListFieldDescriptor.extend(_Base),
        rich_text: SchemaRichTextListFieldDescriptor.extend(_Base),
        struct: SchemaStructListFieldDescriptor.extend(_Base),
        text: SchemaTextListFieldDescriptor.extend(_Base),
        timestamp: SchemaTimestampListFieldDescriptor.extend(_Base),
        tokens: SchemaTokensListFieldDescriptor.extend(_Base),
        uenum: SchemaUenumListFieldDescriptor.extend(_Base),
    })
    .transform<DevRev.SchemaFieldDescriptorArrayType>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace SchemaFieldDescriptorArrayType {
    type Raw =
        | SchemaFieldDescriptorArrayType.Bool
        | SchemaFieldDescriptorArrayType.Composite
        | SchemaFieldDescriptorArrayType.Date
        | SchemaFieldDescriptorArrayType.Double
        | SchemaFieldDescriptorArrayType.Enum
        | SchemaFieldDescriptorArrayType.Id
        | SchemaFieldDescriptorArrayType.Int
        | SchemaFieldDescriptorArrayType.RichText
        | SchemaFieldDescriptorArrayType.Struct
        | SchemaFieldDescriptorArrayType.Text
        | SchemaFieldDescriptorArrayType.Timestamp
        | SchemaFieldDescriptorArrayType.Tokens
        | SchemaFieldDescriptorArrayType.Uenum;

    interface Bool extends _Base, SchemaBoolListFieldDescriptor.Raw {
        base_type: "bool";
    }

    interface Composite extends _Base, SchemaCompositeListFieldDescriptor.Raw {
        base_type: "composite";
    }

    interface Date extends _Base, SchemaDateListFieldDescriptor.Raw {
        base_type: "date";
    }

    interface Double extends _Base, SchemaDoubleListFieldDescriptor.Raw {
        base_type: "double";
    }

    interface Enum extends _Base, SchemaEnumListFieldDescriptor.Raw {
        base_type: "enum";
    }

    interface Id extends _Base, SchemaIdListFieldDescriptor.Raw {
        base_type: "id";
    }

    interface Int extends _Base, SchemaIntListFieldDescriptor.Raw {
        base_type: "int";
    }

    interface RichText extends _Base, SchemaRichTextListFieldDescriptor.Raw {
        base_type: "rich_text";
    }

    interface Struct extends _Base, SchemaStructListFieldDescriptor.Raw {
        base_type: "struct";
    }

    interface Text extends _Base, SchemaTextListFieldDescriptor.Raw {
        base_type: "text";
    }

    interface Timestamp extends _Base, SchemaTimestampListFieldDescriptor.Raw {
        base_type: "timestamp";
    }

    interface Tokens extends _Base, SchemaTokensListFieldDescriptor.Raw {
        base_type: "tokens";
    }

    interface Uenum extends _Base, SchemaUenumListFieldDescriptor.Raw {
        base_type: "uenum";
    }

    interface _Base {
        eq_items?: number | null;
        max_items?: number | null;
        min_items?: number | null;
    }
}
