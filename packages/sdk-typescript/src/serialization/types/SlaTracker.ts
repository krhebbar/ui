/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { ArchetypeMetricTarget } from "./ArchetypeMetricTarget";
import { RemovedSlaMetricHistory } from "./RemovedSlaMetricHistory";
import { SlaSummary } from "./SlaSummary";
import { AtomBase } from "./AtomBase";

export const SlaTracker: core.serialization.ObjectSchema<serializers.SlaTracker.Raw, DevRev.SlaTracker> =
    core.serialization
        .object({
            appliesToId: core.serialization.property("applies_to_id", core.serialization.string().optional()),
            metricTargetSummaries: core.serialization.property(
                "metric_target_summaries",
                core.serialization.list(ArchetypeMetricTarget)
            ),
            removedSlaMetricHistory: core.serialization.property(
                "removed_sla_metric_history",
                core.serialization.list(RemovedSlaMetricHistory).optional()
            ),
            sla: SlaSummary.optional(),
            slaPolicyId: core.serialization.property("sla_policy_id", core.serialization.string().optional()),
            stage: core.serialization.string().optional(),
            status: core.serialization.string().optional(),
        })
        .extend(AtomBase);

export declare namespace SlaTracker {
    interface Raw extends AtomBase.Raw {
        applies_to_id?: string | null;
        metric_target_summaries: ArchetypeMetricTarget.Raw[];
        removed_sla_metric_history?: RemovedSlaMetricHistory.Raw[] | null;
        sla?: SlaSummary.Raw | null;
        sla_policy_id?: string | null;
        stage?: string | null;
        status?: string | null;
    }
}
