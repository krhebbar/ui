/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { SchemaFieldDescriptor } from "./SchemaFieldDescriptor";
import * as core from "../../core";
import * as serializers from "../index";
import * as DevRev from "../../api/index";
import { ContentTemplateCreateRequestNotificationContentTemplate } from "./ContentTemplateCreateRequestNotificationContentTemplate";

const _Base = core.serialization.object({
    inputFieldsSchema: core.serialization.property(
        "input_fields_schema",
        core.serialization.list(SchemaFieldDescriptor).optional()
    ),
    name: core.serialization.string(),
});
export const ContentTemplateCreateRequest: core.serialization.Schema<
    serializers.ContentTemplateCreateRequest.Raw,
    DevRev.ContentTemplateCreateRequest
> = core.serialization
    .union("type", {
        notification_content_template: ContentTemplateCreateRequestNotificationContentTemplate.extend(_Base),
    })
    .transform<DevRev.ContentTemplateCreateRequest>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace ContentTemplateCreateRequest {
    type Raw = ContentTemplateCreateRequest.NotificationContentTemplate;

    interface NotificationContentTemplate extends _Base, ContentTemplateCreateRequestNotificationContentTemplate.Raw {
        type: "notification_content_template";
    }

    interface _Base {
        input_fields_schema?: SchemaFieldDescriptor.Raw[] | null;
        name: string;
    }
}
