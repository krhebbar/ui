/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { CustomSchemaFragmentsSetRequestCompositeSchema } from "./CustomSchemaFragmentsSetRequestCompositeSchema";
import { CustomSchemaFragmentCondition } from "./CustomSchemaFragmentCondition";
import { SchemaFieldDescriptor } from "./SchemaFieldDescriptor";
import * as core from "../../core";
import * as serializers from "../index";
import * as DevRev from "../../api/index";
import { CustomSchemaFragmentsSetRequestAppFragment } from "./CustomSchemaFragmentsSetRequestAppFragment";
import { CustomSchemaFragmentsSetRequestCustomTypeFragment } from "./CustomSchemaFragmentsSetRequestCustomTypeFragment";
import { CustomSchemaFragmentsSetRequestTenantFragment } from "./CustomSchemaFragmentsSetRequestTenantFragment";

const _Base = core.serialization.object({
    compositeSchemas: core.serialization.property(
        "composite_schemas",
        core.serialization.list(CustomSchemaFragmentsSetRequestCompositeSchema).optional()
    ),
    conditions: core.serialization.list(CustomSchemaFragmentCondition).optional(),
    deletedFields: core.serialization.property(
        "deleted_fields",
        core.serialization.list(core.serialization.string()).optional()
    ),
    deprecated: core.serialization.boolean().optional(),
    description: core.serialization.string(),
    fields: core.serialization.list(SchemaFieldDescriptor).optional(),
    isCustomLeafType: core.serialization.property("is_custom_leaf_type", core.serialization.boolean().optional()),
    leafType: core.serialization.property("leaf_type", core.serialization.string()),
});
export const CustomSchemaFragmentsSetRequest: core.serialization.Schema<
    serializers.CustomSchemaFragmentsSetRequest.Raw,
    DevRev.CustomSchemaFragmentsSetRequest
> = core.serialization
    .union("type", {
        app_fragment: CustomSchemaFragmentsSetRequestAppFragment.extend(_Base),
        custom_type_fragment: CustomSchemaFragmentsSetRequestCustomTypeFragment.extend(_Base),
        tenant_fragment: CustomSchemaFragmentsSetRequestTenantFragment.extend(_Base),
    })
    .transform<DevRev.CustomSchemaFragmentsSetRequest>({
        transform: (value) => value,
        untransform: (value) => value,
    });

export declare namespace CustomSchemaFragmentsSetRequest {
    type Raw =
        | CustomSchemaFragmentsSetRequest.AppFragment
        | CustomSchemaFragmentsSetRequest.CustomTypeFragment
        | CustomSchemaFragmentsSetRequest.TenantFragment;

    interface AppFragment extends _Base, CustomSchemaFragmentsSetRequestAppFragment.Raw {
        type: "app_fragment";
    }

    interface CustomTypeFragment extends _Base, CustomSchemaFragmentsSetRequestCustomTypeFragment.Raw {
        type: "custom_type_fragment";
    }

    interface TenantFragment extends _Base, CustomSchemaFragmentsSetRequestTenantFragment.Raw {
        type: "tenant_fragment";
    }

    interface _Base {
        composite_schemas?: CustomSchemaFragmentsSetRequestCompositeSchema.Raw[] | null;
        conditions?: CustomSchemaFragmentCondition.Raw[] | null;
        deleted_fields?: string[] | null;
        deprecated?: boolean | null;
        description: string;
        fields?: SchemaFieldDescriptor.Raw[] | null;
        is_custom_leaf_type?: boolean | null;
        leaf_type: string;
    }
}
