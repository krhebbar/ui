/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../index";
import * as DevRev from "../../api/index";
import * as core from "../../core";
import { TicketChannels } from "./TicketChannels";
import { TicketSeverity } from "./TicketSeverity";
import { SlaSummaryFilter } from "./SlaSummaryFilter";
import { SurveyAggregationFilter } from "./SurveyAggregationFilter";

export const WorksFilterTicket: core.serialization.ObjectSchema<
    serializers.WorksFilterTicket.Raw,
    DevRev.WorksFilterTicket
> = core.serialization.object({
    channels: core.serialization.list(TicketChannels).optional(),
    group: core.serialization.list(core.serialization.string()).optional(),
    isSpam: core.serialization.property("is_spam", core.serialization.boolean().optional()),
    needsResponse: core.serialization.property("needs_response", core.serialization.boolean().optional()),
    revOrg: core.serialization.property("rev_org", core.serialization.list(core.serialization.string()).optional()),
    severity: core.serialization.list(TicketSeverity).optional(),
    slaSummary: core.serialization.property("sla_summary", SlaSummaryFilter.optional()),
    sourceChannel: core.serialization.property(
        "source_channel",
        core.serialization.list(core.serialization.string()).optional()
    ),
    subtype: core.serialization.list(core.serialization.string()).optional(),
    surveys: SurveyAggregationFilter.optional(),
});

export declare namespace WorksFilterTicket {
    interface Raw {
        channels?: TicketChannels.Raw[] | null;
        group?: string[] | null;
        is_spam?: boolean | null;
        needs_response?: boolean | null;
        rev_org?: string[] | null;
        severity?: TicketSeverity.Raw[] | null;
        sla_summary?: SlaSummaryFilter.Raw | null;
        source_channel?: string[] | null;
        subtype?: string[] | null;
        surveys?: SurveyAggregationFilter.Raw | null;
    }
}
