/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as DevRev from "../../../../../api/index";
import * as core from "../../../../../core";
import { FieldDescriptor } from "../../../../types/FieldDescriptor";

export const AggregatedSchemaGetRequest: core.serialization.Schema<
    serializers.AggregatedSchemaGetRequest.Raw,
    DevRev.AggregatedSchemaGetRequest
> = core.serialization.object({
    customSchemaFragmentIds: core.serialization.property(
        "custom_schema_fragment_ids",
        core.serialization.list(core.serialization.string())
    ),
    leafType: core.serialization.property("leaf_type", core.serialization.string().optional()),
    perObjectSchema: core.serialization.property(
        "per_object_schema",
        core.serialization.list(FieldDescriptor).optional()
    ),
    stockSchemaFragmentId: core.serialization.property(
        "stock_schema_fragment_id",
        core.serialization.string().optional()
    ),
});

export declare namespace AggregatedSchemaGetRequest {
    interface Raw {
        custom_schema_fragment_ids: string[];
        leaf_type?: string | null;
        per_object_schema?: FieldDescriptor.Raw[] | null;
        stock_schema_fragment_id?: string | null;
    }
}
