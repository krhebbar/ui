/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as DevRev from "../../../../../api/index";
import * as core from "../../../../../core";
import { AccessLevel } from "../../../../types/AccessLevel";
import { SetSharedWithMembership } from "../../../../types/SetSharedWithMembership";
import { QuestionAnswerStatus } from "../../../../types/QuestionAnswerStatus";
import { SetTagWithValue } from "../../../../types/SetTagWithValue";

export const QuestionAnswersCreateRequest: core.serialization.Schema<
    serializers.QuestionAnswersCreateRequest.Raw,
    DevRev.QuestionAnswersCreateRequest
> = core.serialization.object({
    accessLevel: core.serialization.property("access_level", AccessLevel.optional()),
    answer: core.serialization.string(),
    appliesToArticles: core.serialization.property(
        "applies_to_articles",
        core.serialization.list(core.serialization.string()).optional()
    ),
    appliesToParts: core.serialization.property(
        "applies_to_parts",
        core.serialization.list(core.serialization.string())
    ),
    ownedBy: core.serialization.property("owned_by", core.serialization.list(core.serialization.string())),
    question: core.serialization.string(),
    sharedWith: core.serialization.property("shared_with", core.serialization.list(SetSharedWithMembership).optional()),
    sources: core.serialization.list(core.serialization.string()).optional(),
    status: QuestionAnswerStatus,
    suggestedAnswer: core.serialization.property("suggested_answer", core.serialization.string().optional()),
    suggestedForDeletion: core.serialization.property(
        "suggested_for_deletion",
        core.serialization.boolean().optional()
    ),
    tags: core.serialization.list(SetTagWithValue).optional(),
    topic: core.serialization.string().optional(),
    verified: core.serialization.boolean().optional(),
});

export declare namespace QuestionAnswersCreateRequest {
    interface Raw {
        access_level?: AccessLevel.Raw | null;
        answer: string;
        applies_to_articles?: string[] | null;
        applies_to_parts: string[];
        owned_by: string[];
        question: string;
        shared_with?: SetSharedWithMembership.Raw[] | null;
        sources?: string[] | null;
        status: QuestionAnswerStatus.Raw;
        suggested_answer?: string | null;
        suggested_for_deletion?: boolean | null;
        tags?: SetTagWithValue.Raw[] | null;
        topic?: string | null;
        verified?: boolean | null;
    }
}
