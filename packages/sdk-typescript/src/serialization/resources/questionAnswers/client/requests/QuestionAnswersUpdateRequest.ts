/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as DevRev from "../../../../../api/index";
import * as core from "../../../../../core";
import { AccessLevel } from "../../../../types/AccessLevel";
import { QuestionAnswersUpdateRequestAppliesToArticles } from "../../../../types/QuestionAnswersUpdateRequestAppliesToArticles";
import { QuestionAnswersUpdateRequestAppliesToParts } from "../../../../types/QuestionAnswersUpdateRequestAppliesToParts";
import { QuestionAnswersUpdateRequestOwnedBy } from "../../../../types/QuestionAnswersUpdateRequestOwnedBy";
import { QuestionAnswersUpdateRequestSharedWith } from "../../../../types/QuestionAnswersUpdateRequestSharedWith";
import { QuestionAnswersUpdateRequestSources } from "../../../../types/QuestionAnswersUpdateRequestSources";
import { QuestionAnswerStatus } from "../../../../types/QuestionAnswerStatus";
import { QuestionAnswersUpdateRequestTags } from "../../../../types/QuestionAnswersUpdateRequestTags";

export const QuestionAnswersUpdateRequest: core.serialization.Schema<
    serializers.QuestionAnswersUpdateRequest.Raw,
    DevRev.QuestionAnswersUpdateRequest
> = core.serialization.object({
    accessLevel: core.serialization.property("access_level", AccessLevel.optional()),
    answer: core.serialization.string().optional(),
    appliesToArticles: core.serialization.property(
        "applies_to_articles",
        QuestionAnswersUpdateRequestAppliesToArticles.optional()
    ),
    appliesToParts: core.serialization.property(
        "applies_to_parts",
        QuestionAnswersUpdateRequestAppliesToParts.optional()
    ),
    id: core.serialization.string(),
    ownedBy: core.serialization.property("owned_by", QuestionAnswersUpdateRequestOwnedBy.optional()),
    question: core.serialization.string().optional(),
    sharedWith: core.serialization.property("shared_with", QuestionAnswersUpdateRequestSharedWith.optional()),
    sources: QuestionAnswersUpdateRequestSources.optional(),
    status: QuestionAnswerStatus.optional(),
    suggestedAnswer: core.serialization.property("suggested_answer", core.serialization.string().optional()),
    suggestedForDeletion: core.serialization.property(
        "suggested_for_deletion",
        core.serialization.boolean().optional()
    ),
    tags: QuestionAnswersUpdateRequestTags.optional(),
    topic: core.serialization.string().optional(),
    verified: core.serialization.boolean().optional(),
});

export declare namespace QuestionAnswersUpdateRequest {
    interface Raw {
        access_level?: AccessLevel.Raw | null;
        answer?: string | null;
        applies_to_articles?: QuestionAnswersUpdateRequestAppliesToArticles.Raw | null;
        applies_to_parts?: QuestionAnswersUpdateRequestAppliesToParts.Raw | null;
        id: string;
        owned_by?: QuestionAnswersUpdateRequestOwnedBy.Raw | null;
        question?: string | null;
        shared_with?: QuestionAnswersUpdateRequestSharedWith.Raw | null;
        sources?: QuestionAnswersUpdateRequestSources.Raw | null;
        status?: QuestionAnswerStatus.Raw | null;
        suggested_answer?: string | null;
        suggested_for_deletion?: boolean | null;
        tags?: QuestionAnswersUpdateRequestTags.Raw | null;
        topic?: string | null;
        verified?: boolean | null;
    }
}
